import os
import numpy as np
import pandas as pd
from math import e
from ast import literal_eval
from malwareDetector.detector import detector
from config import subDetectorConfig
from utils import get_ware_CPU_Arc

class graphGeneration(detector):
    def __init__(self, file_name):
        self.config = subDetectorConfig()
        self.input_file_path = os.path.join(self.config.baseConfig.folder.disassemble, f'{file_name}.csv')
        self.output_file_path = os.path.join(self.config.baseConfig.folder.vectorize, f'{file_name}.npy')
        self.feature_file_path = os.path.join(self.config.baseConfig.folder.feature, f"feature_{get_ware_CPU_Arc(file_name)}.csv")
        self.df_sample = pd.read_csv(self.input_file_path)
        self.df_feature = self.get_feature()
        self.NUM_FEATURE = len(self.df_feature)
        self.SAMPLE_SIZE = len(self.df_sample)
        self.affinity_matrix = np.zeros((self.NUM_FEATURE, self.NUM_FEATURE))

    def get_feature(self):
        df = pd.read_csv(self.feature_file_path)
        return df['n-gram'].apply(literal_eval)

    def check_n_gram(self, idx):
        addr_list = []
        feature = self.df_feature.iloc[idx]
        for index, data in self.df_sample.iterrows():
            if data['opcode'] != feature[0]:
                continue
            cur = index
            isGot = True
            for i in range(1, len(feature)):
                cur += 1
                if cur >= self.SAMPLE_SIZE:
                    isGot = False
                    break
                if self.df_sample.loc[cur, 'opcode'] != feature[i - 1]:
                    isGot = False
                    break
            if isGot:
                addr_list.append(data['addr'])
        return addr_list

    def get_E_value(self, i, j):
        addr_list_i = np.array(self.check_n_gram(i))
        addr_list_j = np.array(self.check_n_gram(j))
        if not np.any(addr_list_i) or not np.any(addr_list_j):
            return 0
        try:
            diff = np.abs(np.min(addr_list_i[:, np.newaxis] - addr_list_j - 1, axis=1))
            exp_diff = np.exp(np.clip(diff, -709, 709))
            E_value = np.sum(2 / (1 + exp_diff))
        except Exception as e:
            print("An exception occurred:", type(e))
            E_value = 0
        return E_value
    
    def get_affinity_matrix(self):
        self.affinity_matrix = np.fromfunction(np.vectorize(lambda i, j: self.get_E_value(i, j)),
                                              (self.NUM_FEATURE, self.NUM_FEATURE),
                                               dtype=int)
    
    def row_normalize(self):
        row_norms = np.linalg.norm(self.affinity_matrix, axis=1, keepdims=True)
        row_norms = np.where(row_norms == 0, 1, row_norms)
        self.affinity_matrix /= row_norms
    
    def save_affinity_matrix(self):
        np.save(self.output_file_path, self.affinity_matrix)

def vectorization_helper(file_name):
    try:
        vct = graphGeneration(file_name)
        print(f"Successfully opened file {file_name}.")
        vct.get_affinity_matrix()
        vct.row_normalize()
        vct.save_affinity_matrix()
        print(f'Successfully get {file_name}\'s affinity matrix.')
    except Exception as e:
        print("An exception occurred:", type(e))
