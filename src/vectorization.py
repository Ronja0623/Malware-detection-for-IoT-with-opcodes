from malwareDetector.detector import detector
import numpy as np
import pandas as pd
from math import e

def string_to_tuple(str):
    return tuple(str.split())

def vectorization_helper(file_name):
    vct = vectorize(file_name)
    vct.get_affinity_matrix()
    vct.row_normalize()
    vct.save_affinity_matrix()

class vectorize(detector):
    def __init__(self, file_name):
        super().__init__()
        self.input_file_path = self.output_csv_opcode_dir_path + '/{}.csv'.format(file_name)
        self.output_file_path = self.output_npy_vectorization_dir_path + '/{}.npy'.format(file_name)
        self.df_sample = pd.read_csv(self.input_file_path)
        self.NUM_FEATURE = len(self.df_feature)
        self.affinity_matrix = np.zeros((self.NUM_FEATURE, self.NUM_FEATURE))

    def check_n_gram(self, index):
        addr_list = []
        feature = self.df_feature.iloc[index]
        for data in self.df_sample:
            if data['opcode'] != feature['n_gram'][0]:
                continue
            cur = self.df_sample.index(data)
            isGot = True
            for i in (1, feature['n(n_gram)']):
                cur += 1
                if cur >= len(self.df_sample):
                    isGot = False
                    break
                if self.df_sample[cur]['opcode'] != feature['n_gram'][i - 1]:
                    isGot = False
                    break
            if isGot:
                addr_list.append(data['addr'])
        return addr_list

    def get_E_value(self, i, j):
        addr_list_i = np.array(self.check_n_gram(i))
        addr_list_j = np.array(self.check_n_gram(j))
        E_value = np.sum(2 / (1 + np.exp(np.abs(addr_list_i[:, None] - addr_list_j - 1))))
        return E_value
    
    def get_affinity_matrix(self):
        self.affinity_matrix = np.fromfunction(np.vectorize(lambda i, j: self.get_E_value(i, j)),
                                              (self.NUM_FEATURE, self.NUM_FEATURE),
                                               dtype=int)
    
    def row_normalize(self):
        row_norms = np.linalg.norm(self.affinity_matrix, axis=1, keepdims=True)
        self.affinity_matrix /= row_norms
    
    def save_affinity_matrix(self):
        np.save(self.output_file_path, self.affinity_matrix)