import setting
from setting import helper
import pandas as pd
from nltk.util import ngrams
from collections import Counter
from math import log, nan

def get_ngrams(df, n):
    counter = Counter(ngrams(df['opcode'], n))
    counter = Counter(list(counter.keys()))
    return counter

class feature_selection:
    def __init__(self):
        self.n = 2
        self.input_dir_path = './02_csv/'
        self.output_CIG_csv_path = './03_feature_selection_csv/n_grams.csv'
        self.output_feature_selected_csv_path = './03_feature_selection_csv/feature_selected.csv'
        self.df_CIG = pd.DataFrame(columns=['n-gram', 'times_benign_ware', 'times_malware', 'CIG_benign_ware', 'CIG_malware', 'n(n-gram)'])
        self.df_selected = pd.DataFrame()

    def n_grams_handler(self):
        for i in range(self.n):
            for wt in setting.waretype:
                dir_path = self.input_dir_path + '{}'.format(wt)
                file_list = helper.get_file_list(dir_path)
                n_grams = Counter()
                for file_name in file_list:
                    n_grams += get_ngrams(pd.read_csv(helper.get_file_path(dir_path, file_name)), i + 1)
                for n_gram, count in n_grams.items():
                    str_n_gram = ' '.join(map(str, n_gram))
                    if str_n_gram in self.df_CIG['n-gram'].values:
                        self.df_CIG.loc[self.df_CIG['n-gram'] == str_n_gram, 'times_{}'.format(wt)] = count
                    else:
                        data = {'n-gram': str_n_gram, 'times_{}'.format(wt): count, 'CIG_benign_ware': 0, 'CIG_malware': 0, 'n(n-gram)': i + 1}
                        self.df_CIG = self.df_CIG._append(data, ignore_index=True)

    def CIG_calculator(self):
        for i in range(len(self.df_CIG)):
            for wt in setting.waretype:
                ano = setting.waretype[setting.waretype.index(wt) ^ 1]
                NUM_WT = len(helper.get_file_list(self.dataset_dir_path + '/' + wt))
                NUM_ANO = len(helper.get_file_list(self.dataset_dir_path + '/' + ano))

                P_all_wt = NUM_WT / (NUM_WT + NUM_ANO)
                P_all_ano = 1 - P_all_wt
                P_yes_wt = self.df_CIG.loc[i, 'times_' + wt] / NUM_WT
                P_no_ano = (NUM_ANO - self.df_CIG.loc[i, 'times_' + ano]) / NUM_ANO
                P_yes_all = (self.df_CIG.loc[i, 'times_benign_ware'] + self.df_CIG.loc[i, 'times_malware']) / (NUM_WT + NUM_ANO)
                P_no_all = 1 - P_yes_all

                if P_no_all == 0:
                    CIG_WT = nan
                else:
                    CIG_WT = P_yes_wt * log(P_yes_wt / P_yes_all / P_all_wt, 2) + P_no_ano * log(P_no_ano / P_no_all / P_all_ano, 2)

                self.df_CIG.loc[i, 'CIG_' + wt] = CIG_WT
    
    def selection(self):
        self.df_CIG = self.df_CIG.sort_values(by='CIG_malware', ascending=False)
        self.df_selected = self.df_CIG.head(int(0.0001 * len(self.df_CIG)))

    def get_selected_feature_dataframe(self):
        df_feature = self.df_selected.loc[:, ['n-gram', 'n(n-gram)']]
        df_feature['n-gram'] = df_feature['n-gram'].apply(lambda str: tuple(str.split()))
        return df_feature
    
    def feature_selection_helper(self):
        self.n_grams_handler()
        self.CIG_calculator()
        self.selection()

        self.df_CIG.to_csv(self.output_CIG_csv_path)
        self.df_selected.to_csv(self.output_feature_selected_csv_path)

        return self.get_selected_feature_dataframe()