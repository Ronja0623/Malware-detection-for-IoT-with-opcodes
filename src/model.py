import torch


input_vector = torch.randn(1, 1, 1, 8)


input_tensor = torch.squeeze(input_vector, dim=1)
input_tensor = torch.squeeze(input_tensor, dim=1)
print(input_tensor.shape)

class CNNModel(torch.nn.Module):
    def __init__(self):
        super(CNNModel, self).__init__()
        self.conv1 = torch.nn.Conv1d(in_channels=1, out_channels=16, kernel_size=3)
        self.pool = torch.nn.MaxPool1d(kernel_size=2)
        self.fc1 = torch.nn.Linear(16 * 3, 10)

    def forward(self, x):
        x = x.unsqueeze(1)
        x = self.pool(torch.relu(self.conv1(x)))
        x = x.view(-1, 16 * 3)
        x = self.fc1(x)
        return x

model = CNNModel()

output = model(input_tensor)
print(output.shape)
