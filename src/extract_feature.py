import os
import pandas as pd
import numpy as np
from nltk.util import ngrams
from collections import Counter
from malwareDetector.detector import detector
from config import subDetectorConfig
from utils import get_filtered_list

class extractFeature(detector):
    def __init__(self):
        self.config = subDetectorConfig()
        self.n = 2
        self.input_dir_path = self.config.baseConfig.folder.disassemble

    def get_ngrams_file_path(self, wt, ca, idx):
        return os.path.join(self.config.baseConfig.folder.feature, f"{idx}-grams_{wt}_{ca}.csv")

    def get_CIG_file_path(self, ca):
        return os.path.join(self.config.baseConfig.folder.feature, f"CIG_{ca}.csv")
    
    def get_feature_file_path(self, ca):
        return os.path.join(self.config.baseConfig.folder.feature, f"feature_{ca}.csv")
    
    def create_empty_dataframe(self):
        return pd.DataFrame(columns=['n-gram', 'count_benignware', 'count_malware', 'CIG_benignware', 'CIG_malware', 'n(n-gram)'])

    def get_ngrams(self, df, n):
        counter = Counter(ngrams(df['opcode'], n))
        counter = Counter(list(counter.keys()))
        return counter

    # wt: label, ca: CPU Architecture, idx: index
    def get_ngrams_counter(self, wt, ca, idx):
        #
        wt_set = set(get_filtered_list('label', wt))
        ca_list = get_filtered_list('CPU Architecture', ca)
        filtered_list = list(wt_set.intersection(ca_list))
        #
        progress = 1
        size_fl = len(filtered_list)
        #
        n_grams = Counter()
        for file_name in filtered_list:
            print(f"{progress / size_fl} Processing {file_name}...")
            n_grams += self.get_ngrams(pd.read_csv(os.path.join(self.input_dir_path, f"{file_name}.csv")), idx)
            progress += 1
        # save the file
        df = pd.DataFrame(list(n_grams.items()), columns=['n-gram', f'count_{wt}'])
        df.to_csv(self.get_ngrams_file_path(wt, ca, idx), index=False)
    
    # TODO: refactor with starmap
    def count(self, ca):
        for idx in range(1, 3):
            for wt in self.config.subConfig.WARETYPE:
                self.get_ngrams_counter(wt, ca, idx)
    
    def merge_count(self, df, df_b, df_m):
        merged_df = pd.merge(df, df_b, on='n-gram', how='left')
        merged_df = pd.merge(merged_df, df_m, on='n-gram', how='left')
        for wt in self.config.subConfig.WARETYPE:
            merged_df[f'count_{wt}'] = merged_df[f'count_{wt}_y'].fillna(merged_df[f'count_{wt}_x'])
        merged_df = merged_df.drop(columns=['count_benignware_x', 'count_benignware_y', 'count_malware_x', 'count_malware_y'])
        return merged_df
    
    def get_grams_union(self, ca):
        df = self.create_empty_dataframe()
        for idx in range(1, 3):
            df_tmp = self.create_empty_dataframe()
            df_b = pd.read_csv(self.get_ngrams_file_path('benignware', ca, idx))
            df_m = pd.read_csv(self.get_ngrams_file_path('malware', ca, idx))
            union_set = set(df_b['n-gram']).union(set(df_m['n-gram']))
            df_tmp['n-gram'] = list(union_set)
            df_tmp['n(n-gram)'] = idx
            df_tmp = self.merge_count(df_tmp, df_b, df_m)
            df = pd.concat([df, df_tmp], axis=0)
        df.reset_index(drop=True, inplace=True)
        return df
    
    def CIG_calculator(self, df):
        df = df.fillna(0)
        for wt in self.config.subConfig.WARETYPE:
            NUM_WT = self.config.subConfig.NUM_BENIGNWARE if wt == 'benignware' else self.config.subConfig.NUM_MALWARE
            NUM_ANO = self.config.subConfig.NUM_MALWARE if wt == 'benignware' else self.config.subConfig.NUM_BENIGNWARE
            ngramCount_wt = df['count_benignware'].to_numpy() if wt == 'benignware' else df['count_malware'].to_numpy()
            ngramCount_ano = df['count_malware'].to_numpy() if wt == 'benignware' else df['count_benignware'].to_numpy()
            
            P_wt = NUM_WT / (NUM_WT + NUM_ANO)
            P_ano = 1 - P_wt
            P_yes_wt = ngramCount_wt / NUM_WT
            P_yes_ano = ngramCount_ano / NUM_WT
            # P_no_wt = 1 - P_yes_wt
            P_no_ano = 1 - P_yes_ano
            P_yes = (ngramCount_wt + ngramCount_ano) / (NUM_WT + NUM_ANO)
            P_no = 1 - P_yes
            
            CIG = P_yes_wt * np.log2(P_yes_wt / (P_yes * P_wt)) + P_no_ano * np.log2(P_no_ano / (P_no * P_ano))
            df[f'CIG_{wt}'] = CIG
        return df

    def selection(self, df):
        df = df.sort_values(by='CIG_malware', ascending=False)
        df_selected = df.head(int(self.config.subConfig.FEATURE_SELECTION_RATE * len(df)))
        return df_selected

    def extract_feature_helper(self):
        for ca in self.config.subConfig.CPU_ARC:
            print(f'{ca}: Getting unigrams and bigrams ...')
            self.count(ca)
            df = self.get_grams_union(ca)
            print(f'{ca}: Calculating CIG ...')
            df = self.CIG_calculator(df)
            df.to_csv(self.get_CIG_file_path(ca))
            print(f'{ca}: Extrcting features ...')
            df = pd.read_csv(self.get_CIG_file_path(ca))
            df = self.selection(df)
            df.to_csv(self.get_feature_file_path(ca))