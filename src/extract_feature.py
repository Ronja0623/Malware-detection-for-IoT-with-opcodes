from malwareDetector.detector import detector
import pandas as pd
import numpy as np
from nltk.util import ngrams
from collections import Counter
from math import log, nan

def get_ngrams(df, n):
    counter = Counter(ngrams(df['opcode'], n))
    counter = Counter(list(counter.keys()))
    return counter

class extractFeature(detector):
    def __init__(self):
        super().__init__()
        self.config.folder.set_folder("disassemble", "Disassemble")
        self.n = 2
        self.input_dir_path = self.config.folder.disassemble
        self.output_CIG_csv_path = self.config.folder.feature + 'CIG.csv'
        self.output_feature_malware_csv_path = self.config.folder.feature + 'feature_malware.csv'
        self.output_feature_benignware_csv_path = self.config.folder.feature + 'feature_benignware.csv'
        self.df_CIG = pd.DataFrame(columns=['n-gram', 'times_benignware', 'times_malware', 'CIG_benignware', 'CIG_malware', 'n(n-gram)'])
        self.df_selected = pd.DataFrame()

    def n_grams_counter(self):
        for i in range(self.n):
            for wt in self.WARETYPE:
                n_grams = Counter()
                for file_name in self.file_list:
                    if (self.get_ware_label(file_name) == wt).any():
                        continue
                    # TODO: let this line multi and make it faster
                    n_grams += get_ngrams(pd.read_csv(self.get_file_path(self.input_dir_path, '{}.csv'.format(file_name))), i + 1)
                for n_gram, count in n_grams.items():
                    str_n_gram = ' '.join(map(str, n_gram))
                    if str_n_gram in self.df_CIG['n-gram'].values:
                        self.df_CIG.loc[self.df_CIG['n-gram'] == str_n_gram, 'times_{}'.format(wt)] = count
                    else:
                        data = {'n-gram': str_n_gram, 'times_{}'.format(wt): count, 'CIG_benignware': 0, 'CIG_malware': 0, 'n(n-gram)': i + 1}
                        self.df_CIG = self.df_CIG._append(data, ignore_index=True)

    def CIG_calculator(self):
        for wt in self.WARETYPE:
            NUM_WT = self.NUM_BENIGNWARE if wt == 'benignware' else self.NUM_MALWARE
            NUM_ANO = self.NUM_MALWARE if wt == 'benignware' else self.NUM_BENIGNWARE
            WT_TIMES = self.df_CIG['times_benignware'].to_numpy() if wt == 'benignware' else self.df_CIG['times_malware']
            ANO_TIMES = self.df_CIG['times_malware'].to_numpy() if wt == 'benignware' else self.df_CIG['times_benignware']
            
            print(wt)
            P_all_wt = NUM_WT / (NUM_WT + NUM_ANO)
            P_all_ano = 1 - P_all_wt
            P_yes_wt = WT_TIMES / NUM_WT
            P_no_ano = 1 - (NUM_ANO / NUM_ANO)
            P_yes_all = (WT_TIMES + ANO_TIMES) / (NUM_WT + NUM_ANO)
            P_no_all = 1 - P_yes_all
            print(P_all_wt)
            print(P_all_ano)
            print(P_yes_wt)
            print(P_no_ano)
            print(P_yes_all)
            print(P_no_all)
            # TODO: process the exception that P_no_all = 0
            # CIG_WT = P_yes_wt * np.log(P_yes_wt / P_yes_all / P_all_wt, 2) + P_no_ano * np.log(P_no_ano / P_no_all / P_all_ano, 2)

            # self.df_CIG['CIG_' + wt] = CIG_WT
    '''
    def CIG_calculator(self):
        for i in range(len(self.df_CIG)):
            for wt in self.WARETYPE:
                ano = 'malware' if wt == 'benignware' else 'benignware'
                NUM_ANO = self.NUM_MALWARE if wt == 'benignware' else self.NUM_BENIGNWARE
                NUM_WT = self.NUM_BENIGNWARE if wt == 'benignware' else self.NUM_MALWARE
                
                P_all_wt = NUM_WT / (NUM_WT + NUM_ANO)
                P_all_ano = 1 - P_all_wt
                P_yes_wt = self.df_CIG.loc[i, 'times_' + wt] / NUM_WT
                P_no_ano = (NUM_ANO - self.df_CIG.loc[i, 'times_' + ano]) / NUM_ANO
                P_yes_all = (self.df_CIG.loc[i, 'times_benignware'] + self.df_CIG.loc[i, 'times_malware']) / (NUM_WT + NUM_ANO)
                P_no_all = 1 - P_yes_all

                if P_no_all == 0:
                    CIG_WT = nan
                else:
                    CIG_WT = P_yes_wt * log(P_yes_wt / P_yes_all / P_all_wt, 2) + P_no_ano * log(P_no_ano / P_no_all / P_all_ano, 2)

                self.df_CIG.loc[i, 'CIG_' + wt] = CIG_WT
    '''
    
    def selection(self):
        self.df_CIG = self.df_CIG.sort_values(by='CIG_malware', ascending=False)
        self.df_selected = self.df_CIG.head(int(0.0001 * len(self.df_CIG)))

    def get_selected_feature_dataframe(self):
        self.df_feature = self.df_selected.loc[:, ['n-gram', 'n(n-gram)']]
        self.df_feature['n-gram'] = self.df_feature['n-gram'].apply(lambda str: tuple(str.split()))
    
    def func_helper(self):
        self.n_grams_counter()
        self.CIG_calculator()
        # print(self.df_CIG)
        # self.selection()
        # self.get_selected_feature_dataframe()

        # self.df_CIG.to_csv(self.output_CIG_csv_path)
        # self.df_selected.to_csv(self.output_feature_selected_csv_path)