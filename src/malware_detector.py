import os
import pandas as pd
from multiprocessing import Pool, cpu_count
from malwareDetector.detector import detector
from preprocess import disassemble_helper

class subDetector_opcode(detector):
    def __init__(self) -> None:
        super().__init__()
        self.config.folder.set_folder("disassemble", "Disassemble")
        # MEMO
        # disassemble: ouput csv opcode folder: self.config.folder.disassemble
        # extract feature: output csv feature selection folder: self.config.folder.feature
        # vectorize: output npy vectorize folder: self.config.folder.vectorize
        #####
        # Setting
        ## Multiprocess
        self.POOL = Pool(cpu_count())
        ## Dataset
        self.file_list = os.listdir(self.config.path.input)
        self.df_dataset_description = pd.read_csv('./Dataset/dataset.csv')
        self.WARETYPE = ['benignware', 'malware']
        self.set_ware_num()
        ## Feature
        self.df_feature = pd.DataFrame()
    
    def set_ware_num(self):
        value_counts = self.df_dataset_description['label'].value_counts()
        self.NUM_BENIGNWARE = value_counts.get('benignware', 0)
        self.NUM_MALWARE = value_counts.get('malware', 0)

    def preprocess(self):
        self.POOL.map(disassemble_helper, self.file_list)
    
'''
    def extractFeature(self) -> Any:
        ff = extractFeature()
        ff.func_helper()

    def vectorize(self) -> np.array:
        return 'This is the implementation of the vectorize function from the derived class.'

    def model(self) -> Any:
        return 'This is the implementation of the model function from the derived class.'

    def predict(self) -> np.array:
        return 'This is the implementation of the predict function from the derived class.'

'''
if __name__ == '__main__':
    myDetector = subDetector_opcode()
    print(os.getcwd())
    myDetector.mkdir()
    myDetector.preprocess()