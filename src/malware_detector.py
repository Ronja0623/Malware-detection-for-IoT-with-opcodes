import os
from config import subDetectorConfig
from multiprocessing import Pool, cpu_count
from malwareDetector.detector import detector
from rescue_utils import rescueUtils
from preprocess import disassemble_helper
from extract_feature import extractFeature
from vectorization import vectorization_helper

POOL = Pool(cpu_count())

class subDetector(detector):
    def __init__(self) -> None:
        self.config = subDetectorConfig()
        # self.POOL = Pool(cpu_count())

    def preprocess(self):
        POOL.map(disassemble_helper, self.config.subConfig.file_list)
    
    def extractFeature(self):
        ff = extractFeature(self.config)
        ff.extract_feature_helper()

    def vectorize(self):
        POOL.map(vectorization_helper, self.config.subConfig.file_list)

    '''
    def model(self) -> Any:
        return 'This is the implementation of the model function from the derived class.'

    def predict(self) -> np.array:
        return 'This is the implementation of the predict function from the derived class.'
    '''
    
    def mkdir(self):
        for folder in self.config.baseConfig.folder.folder_list:
            os.makedirs(folder, exist_ok=True)

if __name__ == '__main__':
    myDetector = subDetector()
    myDetector.preprocess()
    '''myDetector.mkdir()
    ru = rescueUtils()
    while ru.check_fully_disassemble():
        unprep_list = ru.check_fully_disassemble()
        print(f'Unpreprocessed list: {unprep_list}')
        POOL.map(disassemble_helper, ru.check_fully_disassemble())
    myDetector.extractFeature()'''
    # myDetector.vectorize()