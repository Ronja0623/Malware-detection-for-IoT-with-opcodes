import torch
import torch.nn as nn
import torch.nn.functional as F


class BasicCNN(nn.Module):
    """
    Basic CNN model with 2 convolutional layers and 2 fully connected layers.
    """

    def __init__(self, num_classes):
        super(BasicCNN, self).__init__()
        self.image_size = (28, 28)
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(
            32 * 7 * 7, 128
        )  # Adjust based on your input size after conv layers
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2)
        x = torch.flatten(x, 1)
        x = F.relu(self.fc1(x))
        return self.fc2(x)
