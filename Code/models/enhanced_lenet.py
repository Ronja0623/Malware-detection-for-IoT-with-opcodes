from torch import nn
import torch.nn.functional as F


class EnhancedLeNet(nn.Module):
    """
    Enhanced LeNet model with 3 fully connected layers and dropout.
    """

    def __init__(self, num_classes, input_length):
        super(EnhancedLeNet, self).__init__()
        # First fully connected layer
        self.fc1 = nn.Linear(input_length, 32)
        # Second fully connected layer
        self.fc2 = nn.Linear(32, 64)
        # Third fully connected layer
        self.fc3 = nn.Linear(64, 1024)
        # Output layer
        self.fc4 = nn.Linear(1024, num_classes)
        # Dropout layer
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        # Fully connected layers with ReLU activation and dropout
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        x = F.relu(self.fc3(x))
        x = self.dropout(x)
        # Output layer with log softmax activation
        x = self.fc4(x)
        return F.log_softmax(x, dim=1)
