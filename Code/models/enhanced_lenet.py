import torch
import torch.nn.functional as F
from torch import nn


class EnhancedLeNet(nn.Module):
    """
    Enhanced LeNet model with 2 convolutional layers and 2 fully connected layers.
    Cite:
        Wang, W., Zhu, M., Zeng, X., Ye, X., & Sheng, Y. (2017, January).
        Malware traffic classification using convolutional neural network
        for representation learning. In 2017 International conference on
        information networking (ICOIN) (pp. 712-717). IEEE.
    """

    def __init__(self, num_classes):
        super(EnhancedLeNet, self).__init__()
        self.image_size = (28, 28)
        # First convolutional layer C1
        self.conv1 = nn.Conv2d(
            3, 32, kernel_size=5, padding=2
        )  # padding to keep size 28x28
        # First max-pooling layer P1
        self.pool1 = nn.MaxPool2d(
            kernel_size=2, stride=2
        )  # Resulting in 14x14 feature maps

        # Second convolutional layer C2
        self.conv2 = nn.Conv2d(
            32, 64, kernel_size=5, padding=2
        )  # padding to keep size 14x14
        # Second max-pooling layer P2
        self.pool2 = nn.MaxPool2d(
            kernel_size=2, stride=2
        )  # Resulting in 7x7 feature maps

        # Fully connected layers
        self.fc1 = nn.Linear(64 * 7 * 7, 1024)
        self.fc2 = nn.Linear(1024, num_classes)

        # Dropout layer
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        print(x.shape)
        # Convolutional and max pooling layers
        x = F.relu(self.conv1(x))
        x = self.pool1(x)
        x = F.relu(self.conv2(x))
        x = self.pool2(x)

        # Flatten the output for fully connected layers
        x = torch.flatten(x, 1)
        # Fully connected layers with dropout
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = self.fc2(x)

        # Softmax output layer
        return F.log_softmax(x, dim=1)
