import os

import numpy as np
import pandas as pd
import torch
from torch.utils.data import Dataset


class NpyDataset(Dataset):
    def __init__(self, csv_file, root_dir, transform=None):
        """
        Args:
            csv_file (string): Path to the csv file with annotations.
            root_dir (string): Directory with all the .npy files.
            transform (callable, optional): Optional transform to be applied
                on a sample.
        """
        self.labels_frame = pd.read_csv(csv_file)
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.labels_frame)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.tolist()
        # Assuming the first column is the filename without extension
        npy_name = os.path.join(self.root_dir, f"{self.labels_frame.iloc[idx, 0]}.npy")
        # Load the image
        try:
            image = np.load(npy_name)
        except FileNotFoundError:
            # print(f"File not found: {npy_name}")
            return (
                np.zeros((3, 28, 28), dtype=np.float32),
                0,
            )  # TODO: Change this based on the needs
        # Assuming the second column is the label
        label = self.labels_frame.iloc[idx, 1]
        if self.transform:
            image = self.transform(image)
            print(f"Transformed image shape: {image.shape}")

        return image, label
