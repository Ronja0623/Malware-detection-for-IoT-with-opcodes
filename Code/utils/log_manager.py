import logging


class Logger:
    _instance = None

    def __new__(cls, log_file_path):
        if cls._instance is None:
            cls._instance = super(Logger, cls).__new__(cls)
            cls._instance._initialize(log_file_path)
        return cls._instance

    def _initialize(self, log_file_path):
        self.log_file_path = log_file_path
        self.logger = logging.getLogger(
            "MDIOS_logger"
        )  # MDIOS: Malware Detection for IoT with Opcode Sequences
        self.logger.setLevel(logging.DEBUG)

        if not self.logger.handlers:
            formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            )
            file_handler = logging.FileHandler(self.log_file_path)
            file_handler.setLevel(logging.DEBUG)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)

    @staticmethod
    def get_logger():
        if Logger._instance is None:
            raise Exception("Logger not initialized, call Logger(log_file_path) first.")
        return Logger._instance.logger
