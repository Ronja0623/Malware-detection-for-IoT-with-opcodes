import numpy as np


class ResizeAndPad1DTo2D:
    def __init__(self, target_size):
        self.target_size = target_size

    def __call__(self, input_array):
        return resize_and_pad_1d_to_2d(input_array, self.target_size)


def resize_and_pad_1d_to_2d(input_array, target_size):
    """
    Resize and pad the 1D input array to match the 2D target size with 3 channels.

    Parameters:
        input_array (numpy.ndarray): The input 1D numpy array.
        target_size (tuple): The target size (height, width).

    Returns:
        numpy.ndarray: The resized and padded 2D numpy array with 3 channels.
    """
    channel_size = 3
    input_length = input_array.shape[0]
    target_height, target_width = target_size

    total_elements = channel_size * target_height * target_width
    rep_factor = total_elements // input_length

    repeated_array = np.tile(input_array, rep_factor)

    if repeated_array.size < total_elements:
        repeated_array = np.pad(
            repeated_array,
            (0, total_elements - repeated_array.size),
            "constant",
        )

    reshaped_array = repeated_array[:total_elements].reshape(
        (channel_size, target_height, target_width)
    )
    print(f"Reshaped array shape: {reshaped_array.shape}")
    return reshaped_array
