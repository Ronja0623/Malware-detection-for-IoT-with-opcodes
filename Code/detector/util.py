import os
from datetime import datetime


def set_dataset_description(df):
    global df_dataset_description
    df_dataset_description = df


def get_ware_label(file_name):
    return (
        df_dataset_description.loc[
            df_dataset_description["filename"] == file_name, "label"
        ]
        .values[0]
        .split()[-1]
    )


def get_ware_CPU_Arc(file_name):
    return (
        df_dataset_description.loc[
            df_dataset_description["filename"] == file_name, "CPU Architecture"
        ]
        .values[0]
        .split()[-1]
    )


# get MIPS_list: get_filtered_list('CPU Architecture', 'MIPS')
def get_filtered_list(column_name, key_str):
    return df_dataset_description[
        df_dataset_description[column_name].str.contains(key_str)
    ]["filename"].tolist()


def set_ware_num():
    value_counts = df_dataset_description["label"].value_counts()
    return value_counts.get("benignware", 0), value_counts.get("malware", 0)


def get_filename_with_time(str, extension):
    now = datetime.now()
    time_str = now.strftime("_%m-%d-%H-%M-%S")
    file_name = str + time_str + extension
    return file_name


def extract_filename(file_path):
    return os.path.splitext(os.path.basename(file_path))[0]


def get_unprocess_list(original_list, processed_list):
    original_list = [extract_filename(file) for file in original_list]
    processed_list = [extract_filename(file) for file in processed_list]
    return list(set(original_list) - set(processed_list))


def add_path_and_extension(file_list, directory, extension):
    return [os.path.join(directory, f"{filename}{extension}") for filename in file_list]
