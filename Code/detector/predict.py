import torch
import os
from models.enhanced_lenet import EnhancedLeNet
from .vectorize import Vectorize
from .train_model import DataProcessor


class Predictor:
    """
    Predictor class to handle loading a model and making predictions on input data.

    Attributes:
        config (Config): Configuration object containing necessary settings.
        df_dataset_description (pd.DataFrame): DataFrame containing dataset description.
    """

    def __init__(self, config, df_dataset_description):
        """
        Initialize the Predictor with configuration and dataset description.

        Args:
            config (Config): Configuration object containing necessary settings.
            df_dataset_description (pd.DataFrame): DataFrame containing dataset description.
        """
        self.config = config
        self.df_dataset_description = df_dataset_description
        self.device = torch.device(
            "cuda" if torch.cuda.is_available() else "cpu"
        )
        self.model = None

    def load_model(self, model_path: str) -> None:
        """
        Load the pre-trained model from the specified path.

        Args:
            model_path (str): Path to the pre-trained model file.
        """
        self.model = EnhancedLeNet(num_classes=2)
        self.model.load_state_dict(
            torch.load(model_path, map_location=self.device)
        )
        self.model.to(self.device)
        self.model.eval()

    def preprocess_data(self, data_list: list) -> torch.utils.data.DataLoader:
        """
        Preprocess and vectorize the input data, then convert to a DataLoader.

        Args:
            data_list (list): List of data samples to preprocess.

        Returns:
            DataLoader: DataLoader containing the processed data.
        """
        vectorizer = Vectorize(self.config, self.df_dataset_description)
        processed_data = vectorizer.transform(data_list)
        data_processor = DataProcessor()
        data_loader = data_processor.create_data_loader(
            processed_data, batch_size=1, shuffle=False
        )
        return data_loader

    def predict(self, data_loader: torch.utils.data.DataLoader) -> list:
        """
        Make predictions on the input data using the loaded model.

        Args:
            data_loader (DataLoader): DataLoader containing the processed data.

        Returns:
            list: List of predictions for the given data samples.
        """
        predictions = []
        with torch.no_grad():
            for data in data_loader:
                data = data.to(self.device)
                outputs = self.model(data)
                _, predicted = torch.max(outputs.data, 1)
                predictions.append(predicted.item())
        return predictions
