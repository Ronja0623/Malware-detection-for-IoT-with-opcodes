import logging
import os
from multiprocessing import Pool, cpu_count
from typing import List
import pandas as pd
import r2pipe


class Preprocess:
    def __init__(self, config: object):
        self.config = config

    def _disassemble_a_binary(self, file_name: str):
        try:
            disassemble = Disassemble(self.config, file_name)
            disassemble.run()
        except Exception as e:
            logging.error(f"Error disassembling {file_name}: {e}")

    def run(self, file_list: List[str]):
        with Pool(cpu_count()) as pool:
            pool.map(self._disassemble_a_binary, file_list)


class Disassemble:
    def __init__(self, config: object, file_name: str):
        self.config = config
        self.name = file_name
        self.input_file_path = os.path.join(self.config.folder.dataset, file_name)
        self.output_csv_path = os.path.join(
            self.config.folder.disassemble, f"{file_name}.csv"
        )

        if os.path.exists(self.output_csv_path):
            logging.info(
                f"Output file {self.output_csv_path} already exists. Skipping disassembly."
            )
            self.skip_disassembly = True
        else:
            self.skip_disassembly = False

    def _open_file(self) -> r2pipe.open:
        return r2pipe.open(self.input_file_path)

    def _disassemble_file(self, r2: r2pipe.open) -> pd.DataFrame:
        r2.cmd("aaaa")
        df = pd.DataFrame(r2.cmdj("pDj $SS@$S"))
        df_split = df["opcode"].str.split(expand=True)
        df = pd.concat([df, df_split], axis=1)
        df.rename(columns={"opcode": "dropOp", 0: "opcode"}, inplace=True)
        return df[["opcode"]]

    def _save_file(self, df: pd.DataFrame):
        df.to_csv(self.output_csv_path, index=False)

    def run(self):
        if self.skip_disassembly:
            return

        try:
            r2 = self._open_file()
            logging.info(f"Disassembling {self.name}...")
            df = self._disassemble_file(r2)
            self._save_file(df)
            logging.info(f"Disassembling {self.name} is done.")
        except Exception as e:
            logging.error(f"An exception occurred while disassembling {self.name}: {e}")
        finally:
            r2.quit()
