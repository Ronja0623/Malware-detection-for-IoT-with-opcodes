import os
from multiprocessing import Pool, cpu_count

import pandas as pd
import r2pipe


class Preprocess:
    """
    Preprocess class to handle the preprocessing of binary files.

    Attributes:
        config (Config): Configuration object containing necessary settings.
    """

    def __init__(self, config):
        """
        Initialize the Preprocess class with configuration.

        Args:
            config (Config): Configuration object containing necessary settings.
        """
        self.config = config

    def disassemble_a_binary(self, file_name):
        """
        Disassemble a single binary file.

        Args:
            file_name (str): Name of the binary file to disassemble.
        """
        disassemble = Disassemble(self.config, file_name)
        disassemble.run()

    def run(self, file_list):
        """
        Run the preprocessing on a list of binary files using multiprocessing.

        Args:
            file_list (list): List of binary file names to preprocess.
        """
        with Pool(cpu_count()) as pool:
            pool.map(self.disassemble_a_binary, file_list)


class Disassemble:
    """
    Disassemble class to handle the disassembly of a single binary file.

    Attributes:
        config (Config): Configuration object containing necessary settings.
        name (str): Name of the binary file to disassemble.
        input_file_path (str): Path to the input binary file.
        output_csv_path (str): Path to save the disassembled output in CSV format.
    """

    def __init__(self, config, file_name):
        """
        Initialize the Disassemble class with configuration and file name.

        Args:
            config (Config): Configuration object containing necessary settings.
            file_name (str): Name of the binary file to disassemble.
        """
        self.config = config
        self.name = file_name
        self.input_file_path = os.path.join(
            self.config.folder.dataset, "data", file_name
        )
        self.output_csv_path = os.path.join(
            self.config.folder.disassemble, f"{file_name}.csv"
        )

    def open_file(self):
        """
        Open the binary file using r2pipe.

        Returns:
            r2pipe: r2pipe instance for interacting with the binary file.
        """
        r2 = r2pipe.open(self.input_file_path)
        return r2

    def disassemble_file(self, r2):
        """
        Disassemble the binary file and extract the opcodes.

        Args:
            r2 (r2pipe): r2pipe instance for interacting with the binary file.

        Returns:
            pd.DataFrame: DataFrame containing the disassembled opcodes.
        """
        r2.cmd("aaaa")
        df = pd.DataFrame(r2.cmdj("pDj $SS@$S"))
        df_split = df["opcode"].str.split(expand=True)
        df = pd.concat([df, df_split], axis=1)
        df.rename(columns={"opcode": "dropOp", 0: "opcode"}, inplace=True)
        df = df["opcode"]
        return df

    def save_file(self, df):
        """
        Save the disassembled opcodes to a CSV file.

        Args:
            df (pd.DataFrame): DataFrame containing the disassembled opcodes.
        """
        df.to_csv(self.output_csv_path)

    def run(self):
        """
        Run the disassembly process for the binary file.
        """
        try:
            r2 = self.open_file()
            print(f"Disassembling {self.name}...")
            df = self.disassemble_file(r2)
            self.save_file(df)
            print(f"Disassembling {self.name} is done.")
        except Exception as e:
            print("An exception occurred:", type(e))
