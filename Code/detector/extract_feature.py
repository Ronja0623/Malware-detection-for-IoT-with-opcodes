import os
from collections import Counter

import numpy as np
import pandas as pd
from nltk.util import ngrams

from utils import get_CIG_file_path, get_feature_file_path, get_ngrams_file_path

from .util import get_filtered_list


class ExtractFeature:
    """
    ExtractFeature class to handle feature extraction and selection process.

    Attributes:
        config (Config): Configuration object containing necessary settings.
        input_dir_path (str): Path to the directory containing disassembled files.
        ngram_counter (NgramCounter): Instance of NgramCounter for n-gram operations.
        CIG_counter (CIGCounter): Instance of CIGCounter for CIG calculations.
    """

    def __init__(self, config):
        """
        Initialize ExtractFeature with configuration.

        Args:
            config (Config): Configuration object containing necessary settings.
        """
        self.config = config
        self.input_dir_path = self.config.folder.disassemble
        # construct the methods
        self.ngram_counter = NgramCounter(config, self.input_dir_path)
        self.CIG_counter = CIGCounter(config, self.input_dir_path)

    def select(self, df):
        """
        Select a subset of features based on the CIG_malware score.

        Args:
            df (pd.DataFrame): DataFrame containing features.

        Returns:
            pd.DataFrame: Selected subset of features.
        """
        df = df.sort_values(by="CIG_malware", ascending=False)
        df_selected = df.head(
            int(self.config.model.feature_selection_rate * len(df))
        )
        return df_selected

    def run(self):
        """
        Run the feature extraction and selection process for each CPU architecture.
        """
        for ca in self.config.model.CPU_ARC:
            # get the n-grams
            print(f"{ca}: Getting unigrams and bigrams ...")
            self.ngram_counter.run(ca)
            # get the CIG
            df = self.CIG_counter.get_grams_union(ca)
            print(f"{ca}: Calculating CIG ...")
            df = self.CIG_counter.run(df)
            df.to_csv(get_CIG_file_path(self.config.folder.feature, ca))
            print(f"{ca}: Extracting features ...")
            df = pd.read_csv(get_CIG_file_path(self.config.folder.feature, ca))
            # feature selection
            df = self.select(df)
            df.to_csv(get_feature_file_path(self.config.folder.feature, ca))


class NgramCounter:
    """
    NgramCounter class to handle n-gram counting operations.

    Attributes:
        config (Config): Configuration object containing necessary settings.
        input_dir_path (str): Path to the directory containing disassembled files.
    """

    def __init__(self, config, input_dir_path):
        """
        Initialize NgramCounter with configuration and input directory path.

        Args:
            config (Config): Configuration object containing necessary settings.
            input_dir_path (str): Path to the directory containing disassembled files.
        """
        self.config = config
        self.input_dir_path = input_dir_path

    def get_ngrams(self, df, n):
        """
        Generate n-grams from the opcode column of a DataFrame.

        Args:
            df (pd.DataFrame): DataFrame containing opcode sequences.
            n (int): The length of n-grams to generate.

        Returns:
            Counter: Counter object containing n-grams and their frequencies.
        """
        counter = Counter(ngrams(df["opcode"], n))
        counter = Counter(list(counter.keys()))
        return counter

    def get_ngrams_counter(self, wt, ca, idx):
        """
        Count n-grams for the given ware type and CPU architecture.

        Args:
            wt (str): Ware type (e.g., 'benignware' or 'malware').
            ca (str): CPU architecture.
            idx (int): The length of n-grams to generate.
        """
        wt_set = set(get_filtered_list("label", wt))
        ca_list = get_filtered_list("CPU Architecture", ca)
        filtered_list = list(wt_set.intersection(ca_list))

        progress = 1
        size_fl = len(filtered_list)
        # get the n-grams
        n_grams = Counter()

        for file_name in filtered_list:
            file_path = os.path.join(self.input_dir_path, f"{file_name}.csv")
            if not os.path.exists(file_path):
                print(f"File {file_path} does not exist, skipping...")
                continue
            print(f"{progress / size_fl} Processing {file_name}...")
            n_grams += self.get_ngrams(pd.read_csv(file_path), idx)
            progress += 1
        # save the file
        df = pd.DataFrame(
            list(n_grams.items()), columns=["n-gram", f"count_{wt}"]
        )
        df.to_csv(
            get_ngrams_file_path(self.config.folder.feature, wt, ca, idx),
            index=False,
        )

    def run(self, ca):
        """
        Run n-gram counting for all ware types and n-gram lengths for a given CPU architecture.

        Args:
            ca (str): CPU architecture.
        """
        for idx in range(1, self.config.model.n + 1):
            for wt in self.config.model.WARETYPE:
                self.get_ngrams_counter(wt, ca, idx)


class CIGCounter:
    """
    CIGCounter class to handle the calculation of Context Information Gain (CIG).

    Attributes:
        config (Config): Configuration object containing necessary settings.
        input_dir_path (str): Path to the directory containing disassembled files.
    """

    def __init__(self, config, input_dir_path):
        """
        Initialize CIGCounter with configuration and input directory path.

        Args:
            config (Config): Configuration object containing necessary settings.
            input_dir_path (str): Path to the directory containing disassembled files.
        """
        self.config = config
        self.input_dir_path = input_dir_path

    def create_empty_dataframe(self):
        """
        Create an empty DataFrame for storing n-gram counts and CIG values.

        Returns:
            pd.DataFrame: Empty DataFrame with predefined columns.
        """
        return pd.DataFrame(
            columns=[
                "n-gram",
                "count_benignware",
                "count_malware",
                "CIG_benignware",
                "CIG_malware",
                "n(n-gram)",
            ]
        )

    def merge_count(self, df, df_b, df_m):
        """
        Merge n-gram counts from benignware and malware DataFrames.

        Args:
            df (pd.DataFrame): DataFrame to merge counts into.
            df_b (pd.DataFrame): DataFrame containing benignware n-gram counts.
            df_m (pd.DataFrame): DataFrame containing malware n-gram counts.

        Returns:
            pd.DataFrame: Merged DataFrame with updated n-gram counts.
        """
        merged_df = pd.merge(df, df_b, on="n-gram", how="left")
        merged_df = pd.merge(merged_df, df_m, on="n-gram", how="left")
        for wt in self.config.model.WARETYPE:
            merged_df[f"count_{wt}"] = merged_df[f"count_{wt}_y"].fillna(
                merged_df[f"count_{wt}_x"]
            )
        merged_df = merged_df.drop(
            columns=[
                "count_benignware_x",
                "count_benignware_y",
                "count_malware_x",
                "count_malware_y",
            ]
        )
        return merged_df

    def get_grams_union(self, ca):
        """
        Get the union of n-grams from benignware and malware for a given CPU architecture.

        Args:
            ca (str): CPU architecture.

        Returns:
            pd.DataFrame: DataFrame containing the union of n-grams and their counts.
        """
        df = self.create_empty_dataframe()
        for idx in range(1, self.config.model.n + 1):
            df_tmp = self.create_empty_dataframe()
            df_b = pd.read_csv(
                get_ngrams_file_path(
                    self.config.folder.feature, "benignware", ca, idx
                )
            )
            df_m = pd.read_csv(
                get_ngrams_file_path(
                    self.config.folder.feature, "malware", ca, idx
                )
            )
            union_set = set(df_b["n-gram"]).union(set(df_m["n-gram"]))
            df_tmp["n-gram"] = list(union_set)
            df_tmp["n(n-gram)"] = idx
            df_tmp = self.merge_count(df_tmp, df_b, df_m)
            df = pd.concat([df, df_tmp], axis=0)
        df.reset_index(drop=True, inplace=True)
        return df

    def run(self, df):
        """
        Calculate Context Information Gain (CIG) for benignware and malware.

        Args:
            df (pd.DataFrame): DataFrame containing n-gram counts.

        Returns:
            pd.DataFrame: DataFrame with calculated CIG values.
        """
        df = df.fillna(0)
        for wt in self.config.model.WARETYPE:
            NUM_WT = (
                self.config.model.NUM_BENIGNWARE
                if wt == "benignware"
                else self.config.model.NUM_MALWARE
            )
            NUM_ANO = (
                self.config.model.NUM_MALWARE
                if wt == "benignware"
                else self.config.model.NUM_BENIGNWARE
            )
            ngramCount_wt = (
                df["count_benignware"].to_numpy()
                if wt == "benignware"
                else df["count_malware"].to_numpy()
            )
            ngramCount_ano = (
                df["count_malware"].to_numpy()
                if wt == "benignware"
                else df["count_benignware"].to_numpy()
            )

            P_wt = NUM_WT / (NUM_WT + NUM_ANO)
            P_ano = 1 - P_wt
            P_yes_wt = ngramCount_wt / NUM_WT
            P_yes_ano = ngramCount_ano / NUM_WT
            # P_no_wt = 1 - P_yes_wt
            P_no_ano = 1 - P_yes_ano
            P_yes = (ngramCount_wt + ngramCount_ano) / (NUM_WT + NUM_ANO)
            P_no = 1 - P_yes

            CIG = P_yes_wt * np.log2(
                P_yes_wt / (P_yes * P_wt)
            ) + P_no_ano * np.log2(P_no_ano / (P_no * P_ano))
            df[f"CIG_{wt}"] = CIG
        return df
