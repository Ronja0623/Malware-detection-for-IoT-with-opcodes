import os
import logging
from collections import Counter
import numpy as np
import pandas as pd
from nltk.util import ngrams
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor


class ExtractFeature:
    def __init__(self, config):
        self.config = config
        self.input_dir_path = self.config.folder.disassemble
        self.config.model.set_param(
            "CIG_file_name", "CIG_{ca}_{id}.csv"
        )  # not be passed across the classes, be not needed to set as a parameter
        self.config.model.set_param(
            "ngrams_file_name", "{idx}-grams_{wt}_{ca}_{id}.csv"
        )
        self.ngram_counter = NgramCounter(self.config, self.input_dir_path)
        self.CIG_counter = CIGCounter(self.config, self.input_dir_path)

    def _select(self, df):
        df = df.sort_values(by="CIG_malware", ascending=False)
        df_selected = df.head(int(self.config.model.feature_selection_rate * len(df)))
        return df_selected

    def run(self):
        for ca in self.config.model.CPU_ARC:
            logging.info(f"{ca}: Getting unigrams and bigrams ...")
            self.ngram_counter.run(ca)
            df = self.CIG_counter.get_grams_union(ca)
            logging.info(f"{ca}: Calculating CIG ...")
            df = self.CIG_counter.run(df)
            cig_file_path = os.path.join(
                self.config.folder.feature,
                self.config.model.CIG_file_name.format(
                    ca=ca, id=self.config.path.identifier
                ),
            )
            df.to_csv(cig_file_path)
            logging.info(f"{ca}: CIG saved to {cig_file_path}")
            logging.info(f"{ca}: Extracting features ...")
            df = self._select(df)
            feature_file_path = os.path.join(
                self.config.folder.feature,
                self.config.model.feature_file_name.format(
                    ca=ca, id=self.config.path.identifier
                ),
            )
            df.to_csv(feature_file_path)
            logging.info(f"{ca}: Features saved to {feature_file_path}")


class NgramCounter:
    def __init__(self, config, input_dir_path):
        self.config = config
        self.input_dir_path = input_dir_path

    def _get_ngrams(self, df, n):
        counter = Counter(ngrams(df["opcode"], n))
        return Counter(list(counter.keys()))

    def _read_csv(self, file_path):
        if os.path.exists(file_path):
            return pd.read_csv(file_path)
        else:
            logging.warning(f"File {file_path} does not exist, skipping...")
            return None

    def _process_file(self, file_name, idx):
        file_path = os.path.join(self.input_dir_path, f"{file_name}.csv")
        df = self._read_csv(file_path)
        if df is not None:
            return self._get_ngrams(df, idx)
        return Counter()

    def _get_ngrams_counter(self, wt, ca, idx):
        filtered_list = self.config.model.label_manager.filter_files(
            label=wt, CPUArchitecture=ca
        )
        n_grams = Counter()

        with ThreadPoolExecutor() as executor:
            results = list(
                tqdm(
                    executor.map(
                        self._process_file, filtered_list, [idx] * len(filtered_list)
                    ),
                    total=len(filtered_list),
                )
            )
            for result in results:
                n_grams += result

        df = pd.DataFrame(list(n_grams.items()), columns=["n-gram", f"count_{wt}"])
        ngrams_file_path = os.path.join(
            self.config.folder.feature,
            self.config.model.ngrams_file_name.format(
                idx=idx, wt=wt, ca=ca, id=self.config.path.identifier
            ),
        )
        df.to_csv(ngrams_file_path, index=False)
        logging.info(f"Saved n-grams to {ngrams_file_path}")

    def run(self, ca):
        for idx in range(1, self.config.model.n + 1):
            for wt in self.config.model.WARETYPE:
                logging.info(f"Processing {wt} for {ca} with n-grams length {idx}")
                self._get_ngrams_counter(wt, ca, idx)


class CIGCounter:
    def __init__(self, config, input_dir_path):
        self.config = config
        self.input_dir_path = input_dir_path

    def _create_empty_dataframe(self):
        return pd.DataFrame(
            columns=[
                "n-gram",
                "count_benignware",
                "count_malware",
                "CIG_benignware",
                "CIG_malware",
                "n(n-gram)",
            ]
        )

    def _read_ngrams(self, idx, wt, ca):
        file_path = os.path.join(
            self.config.folder.feature,
            self.config.model.ngrams_file_name.format(
                idx=idx, wt=wt, ca=ca, id=self.config.path.identifier
            ),
        )
        if os.path.exists(file_path):
            return pd.read_csv(file_path)
        else:
            logging.warning(f"N-grams file {file_path} does not exist.")
            return pd.DataFrame()

    def _merge_count(self, df, df_b, df_m):
        merged_df = pd.merge(df, df_b, on="n-gram", how="left").combine_first(
            pd.merge(df, df_m, on="n-gram", how="left")
        )
        merged_df.fillna(0, inplace=True)
        return merged_df

    def get_grams_union(self, ca):
        df = self._create_empty_dataframe()
        for idx in range(1, self.config.model.n + 1):
            df_tmp = self._create_empty_dataframe()
            df_b = self._read_ngrams(idx, "benignware", ca)
            df_m = self._read_ngrams(idx, "malware", ca)
            union_set = set(df_b["n-gram"]).union(set(df_m["n-gram"]))
            df_tmp["n-gram"] = list(union_set)
            df_tmp["n(n-gram)"] = idx
            df_tmp = self._merge_count(df_tmp, df_b, df_m)
            df = pd.concat([df, df_tmp], axis=0)
        df.reset_index(drop=True, inplace=True)
        return df

    def run(self, df):
        df.fillna(0, inplace=True)
        NUM_BENIGNWARE, NUM_MALWARE = self.config.model.label_manager.get_labels_count(
            self.config.model.WARETYPE
        )
        for wt in self.config.model.WARETYPE:
            NUM_WT = NUM_BENIGNWARE if wt == "benignware" else NUM_MALWARE
            NUM_ANO = NUM_MALWARE if wt == "benignware" else NUM_BENIGNWARE
            ngramCount_wt = df[f"count_{wt}"].to_numpy()
            ngramCount_ano = df[
                f"count_malware" if wt == "benignware" else "count_benignware"
            ].to_numpy()

            P_wt = NUM_WT / (NUM_WT + NUM_ANO)
            P_ano = 1 - P_wt
            P_yes_wt = ngramCount_wt / NUM_WT
            P_yes_ano = ngramCount_ano / NUM_WT
            # P_no_wt = 1 - P_yes_wt
            P_no_ano = 1 - P_yes_ano
            P_yes = (ngramCount_wt + ngramCount_ano) / (NUM_WT + NUM_ANO)
            P_no = 1 - P_yes

            CIG = P_yes_wt * np.log2(P_yes_wt / (P_yes * P_wt)) + P_no_ano * np.log2(
                P_no_ano / (P_no * P_ano)
            )
            df[f"CIG_{wt}"] = CIG
        return df
