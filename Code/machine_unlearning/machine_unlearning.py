class machineUnlearning:
    def __init__(self, dataset_path, model_path, model, num_shard, num_slice):
        """
        Initialize the machine unlearning object
        Input:
            dataset_path: the path of the dataset
            model_path: the path of the model
            model: the model e.g. basicCNN, RNN, etc. (a class, need to be implemented)
            num_shard: the number of shards
            num_slice: the number of slices
        """
        self.dataset_path = dataset_path
        self.model_path = model_path
        self.detector = model
        self.num_shard = num_shard
        self.num_slice = num_slice

    def init_model(self):
        """
        Initialize the model
        Method:
            1. Produce SISA description of the model: Shard, Slice
            2. Train the model: Model
                pass the dataset to the model, and train model is implemented in the model class
            3. Save the model: Model
                pass the model name to the model, and save model is implemented in the model class
        Output:
            1. models
            2. SISA description
            3. the files saving the result of training (accuracy, loss, etc.), each shard has one file
        """
        pass

    def add_data_point(self, add_data_description, add_data_path):
        """
        Add data points to the dataset, and retrain the model
        Input:
            add_data_description: the description of the new data points
            add_data_path: the path of the new data points
        Output:
            1. some models (the models are influenced by the new data points)
            2. new SISA description
            3. some files saving the result of training (accuracy, loss, etc.) for the shards that the new data points belong to
            4. a copy of new dataset description file
        """
        pass

    def delete_data_point(self, delete_data_list):
        """
        Delete data points from the dataset, and retrain the model
        Input:
            delete_data_list: list of data points
        Output:
            1. some models
            2. new SISA description
            3. some file saving the result of training (accuracy, loss, etc.) for the shards that the new data points belong to
            4. a copy of new dataset description file
        """
        pass

    def predict(self, predict_data_list):
        """
        Make prediction using the model
        Remark: Don't do other operations, such as preprocess, all the operation should be done befor predict. Just make predictions.
        Method:
            1. Make predictions: Predict
                pass
                    1. predict data list
                    2. models: one model is transmited one time
                to the predict class, and make predictions is implemented in the predict class
            2. Vote, and get the final prediction: Aggregator
        Input:
            predict_data_list: list of data path that have been preprocessed and vectorized
        Output:
            1. a file saving the prediction result
        """
        pass
