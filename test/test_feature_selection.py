import os
import pandas as pd
from nltk.util import ngrams
from collections import Counter
from math import log
from sys import float_info

def get_file_list(input_dir_path):
    return os.listdir(input_dir_path)

def get_file_path(dir_path, file_name):
    return os.path.join(dir_path, file_name)

def get_ngrams(df, n):
    counter = Counter(ngrams(df['opcode'], n))
    counter = Counter(list(counter.keys()))
    return counter

def n_grams_handler(n):
    df_CIG = pd.DataFrame(columns=['n-gram', 'times_benign_ware', 'times_malware', 'CIG_benign_ware', 'CIG_malware', 'n(n-gram)'])
    waretype = ['benign_ware', 'malware']
    for i in range(n):
        for wt in waretype:
            dir_path = 'test/to_csv/{}'.format(wt)
            file_list = get_file_list(dir_path)
            n_grams = Counter()
            for file_name in file_list:
                df_file = pd.read_csv(get_file_path(dir_path, file_name))
                n_grams += get_ngrams(df_file, i + 1)
            for n_gram, count in n_grams.items():
                str_n_gram = ' '.join(map(str, n_gram))
                if str_n_gram in df_CIG['n-gram'].values:
                    df_CIG.loc[df_CIG['n-gram'] == str_n_gram, 'times_{}'.format(wt)] = count
                else:
                    data = {'n-gram': str_n_gram, 'times_{}'.format(wt): count, 'CIG_benign_ware': 0, 'CIG_malware': 0, 'n(n-gram)': i + 1}
                    df_CIG = df_CIG._append(data, ignore_index=True)
    return df_CIG

if __name__ == "__main__":
    n_grams_CIG_csv = 'test/n_grams_csv/n_grams.csv'
    df_CIG = n_grams_handler(2)
    NUM_benign_ware = 3
    NUM_malware = 4
    # wt ^= 1
    # BENIGNWARE
    waretype = ['benign_ware', 'malware']
    wt = 0
    '''
    for i in range(len(df_CIG)):
        P_yes_benign_ware = df_CIG.loc[i, 'times_benign_ware'] / NUM_benign_ware
        print(P_yes_benign_ware)
        P_no_malware = (NUM_malware - df_CIG.loc[i, 'times_malware']) / NUM_malware
        print(P_no_malware)
        P_yes = (df_CIG.loc[i, 'times_benign_ware'] + df_CIG.loc[i, 'times_malware']) / (NUM_benign_ware + NUM_malware)
        print(P_yes)
        P_benign_ware = NUM_benign_ware / (NUM_benign_ware + NUM_malware)
        print(P_benign_ware)
        P_no = 1 - P_yes
        print(P_no)
        P_malware = 1 - P_benign_ware
        print(P_malware)
        if P_yes == 0:
            P_yes = float_info.min
        if P_no == 0:
            P_no = float_info.min
        # CIG_benign_ware = P_yes_benign_ware * log(P_yes_benign_ware / P_yes / P_benign_ware, 2) + P_no_malware * log(P_no_malware / P_no / P_malware, 2)
        # df_CIG.loc[i, 'CIG_benign_ware'] = CIG_benign_ware
        '''
    print(float_info.min)
    print(float_info.min > 0)
    df_CIG.to_csv(n_grams_CIG_csv)