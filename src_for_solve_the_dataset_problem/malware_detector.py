import os
import pandas as pd
from multiprocessing import Pool, cpu_count

class MalwareDetector:
    def __init__(self):
        # input
        self.dataset_dir_path = './dataset/data'
        self.dataset_description_path = './dataset/dataset.csv'
        # output
        self.output_json_opcode_dir_path = './01_json_opcode'
        self.output_csv_opcode_dir_path = './02_csv_opcode'
        self.output_csv_feature_selection_dir_path = './03_csv_feature_selection'
        self.output_csv_vectorization_dir_path = './04_csv_vectorization'
        # setting
        ## multiprocessing
        self.NUM_CPU = cpu_count()
        # self.POOL = Pool(self.NUM_CPU)
        ## dataset
        self.file_list = os.listdir(self.dataset_dir_path)
        self.df_dataset_description = pd.read_csv(self.dataset_description_path)
        self.WARETYPE = ['benignware', 'malware']
        self.get_ware_num()
        ## feature
        self.df_feature = pd.DataFrame()
    
    def get_ware_num(self):
        value_counts = self.df_dataset_description['label'].value_counts()
        self.NUM_BENIGNWARE = value_counts.get('benignware', 0)
        self.NUM_MALWARE = value_counts.get('malware', 0)
    
    def get_ware_label(self, file_name):
        return self.df_dataset_description.loc[self.df_dataset_description['filename'] == file_name, 'label']
    
    # def get_ware_family(self, file_name):
    # def get_ware_CPU Architecture(self, file_name):

    # helper
    def get_file_path(self, dir_path, file_name):
        return os.path.join(dir_path, file_name)
    
    # TODO: make it could be used in its child class preprocess and feature_selection
    '''
    def multi_helper(self, cls_type):
        for i in self.file_list:
            input_pool = []
            for j in range(self.NUM_CPU):
                func = cls_type(i)
                input_pool.append(func)
            self.POOL.map(func.func_helper, input_pool)
    '''
